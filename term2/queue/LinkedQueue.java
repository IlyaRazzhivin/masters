package term2.queue;

/**
 * Релизация очереди на основе односвязного списка аналогично классу LinkedStack
 */
public class LinkedQueue implements Queue {
	/**
	 * В классе LinkedQueue содержатся 3 поля:
	 * ссылка на первый элемент, ссылка на последний элемент и количество элементов в списке
	 * А также внутренний класс Node, описывающий элементы списка.
	 * В классе Node 2 поля: значение текущего элемента и ссылка на следующий элемент.
	 * Такой список называют односвязным.
	 * Сравните с классом LinkedList, в нашей реализации у его элементов были ссылки на следующий и на предыдущий элементы,
	 * такой список назвают двусвязным.
	 */
	
	/**
	 * Метод offer создает новый элемент списка со значением, 
	 * переданным ему в качестве аргумента и ссылкой на следующий элемент равной null, 
	 * поскольку вставка происходит в конец списка. 
	 * Если список был пустым, то новый добавленный элемент будет являться не только последним, но и первым в списке.
	 * Если список не пустой, то элемент, который был последним, теперь станет предпоследним, 
	 * и его ссылка next теперь должна указывать на новый добавленный элемент.  
	 * Меняем ссылку на последний элемент, чтобы она указывала на только что добавленный элемент.
	 * И увеличиваем счетчик количества элементов в массиве.
	 * Данный метод всегда возвращает true
	 */
	@Override
	public boolean offer(Object e) {
		// TODO Auto-generated method stub
		return false;
	}

	/**
	 * Метод poll() возвращает null, если очередь пуста. 
	 * Извлечение заключается в получении значения первого элемента и его удалении из списка.
	 * Ссылка first при этом переходит на второй элемент очереди. 
	 * Значение количества элементов уменьшается на 1.
	 * Если из очереди был удален последний элемент, 
	 * то ссылка на последний элемент last теперь должна ссылаться на null.
	 */
	@Override
	public Object poll() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object peek() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isFull() {
		// TODO Auto-generated method stub
		return false;
	}

}
